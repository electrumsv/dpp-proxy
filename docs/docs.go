// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/libsv/go-payment_protocol/blob/master/CODE_STANDARDS.md",
        "contact": {},
        "license": {
            "name": "ISC",
            "url": "https://github.com/libsv/go-payment_protocol/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/payment/{paymentID}": {
            "get": {
                "description": "Creates a payment request based on a payment id (the identifier for an invoice).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Request to pay an invoice and receive back outputs to use when constructing the payment transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "paymentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "contains the signed PaymentTerms",
                        "schema": {
                            "$ref": "#/definitions/envelope.JSONEnvelope"
                        }
                    },
                    "400": {
                        "description": "returned if the user input is invalid, usually an issue with the paymentID",
                        "schema": {
                            "$ref": "#/definitions/server.ClientError"
                        }
                    },
                    "404": {
                        "description": "returned if the paymentID has not been found",
                        "schema": {
                            "$ref": "#/definitions/server.ClientError"
                        }
                    },
                    "500": {
                        "description": "returned if there is an unexpected internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a payment based on a payment id (the identifier for an invoice).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "A user will submit an SpvEnvelope along with other information that is validated before being broadcast to the network.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "paymentID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "payment message used in BIP270",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dpp.PaymentCreateArgs"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "if success, error code will be empty, otherwise it will be filled in with reason",
                        "schema": {
                            "$ref": "#/definitions/dpp.PaymentACK"
                        }
                    },
                    "400": {
                        "description": "returned if the user input is invalid, usually an issue with the paymentID",
                        "schema": {
                            "$ref": "#/definitions/server.ClientError"
                        }
                    },
                    "404": {
                        "description": "returned if the paymentID has not been found",
                        "schema": {
                            "$ref": "#/definitions/server.ClientError"
                        }
                    },
                    "500": {
                        "description": "returned if there is an unexpected internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/proofs/{txid}": {
            "post": {
                "description": "Creates a json envelope proof",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proofs"
                ],
                "summary": "InvoiceCreate proof",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "txid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON Envelope",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/envelope.JSONEnvelope"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        }
    },
    "definitions": {
        "dpp.PaymentACK": {
            "type": "object",
            "required": [
                "modeId"
            ],
            "properties": {
                "error": {
                    "description": "A number indicating why the transaction was not accepted. 0 or undefined indicates no error.\nA 1 or any other positive integer indicates an error. The errors are left undefined for now;\nit is recommended only to use “1” and to fill the memo with a textual explanation about why\nthe transaction was not accepted until further numbers are defined and standardised.",
                    "type": "integer"
                },
                "memo": {
                    "description": "Memo may contain information about why there was an error. This field is poorly defined until\nerror reporting is more standardised.",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode data required by specific payment mode",
                    "$ref": "#/definitions/hybridmode.PaymentACK"
                },
                "modeId": {
                    "description": "ModeID the chosen mode.",
                    "type": "string",
                    "example": "ef63d9775da5"
                },
                "peerChannel": {
                    "$ref": "#/definitions/hybridmode.PeerChannelData"
                },
                "redirectUrl": {
                    "type": "string"
                }
            }
        },
        "dpp.PaymentCreateArgs": {
            "type": "object",
            "properties": {
                "paymentID": {
                    "type": "string"
                }
            }
        },
        "envelope.JSONEnvelope": {
            "type": "object",
            "properties": {
                "encoding": {
                    "type": "string"
                },
                "mimetype": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "hybridmode.PaymentACK": {
            "type": "object",
            "properties": {
                "peerChannel": {
                    "$ref": "#/definitions/hybridmode.PeerChannelData"
                },
                "transactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "hybridmode.PeerChannelData": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "server.ClientError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "N01"
                },
                "id": {
                    "type": "string",
                    "example": "e97970bf-2a88-4bc8-90e6-2f597a80b93d"
                },
                "message": {
                    "type": "string",
                    "example": "unable to find foo when loading bar"
                },
                "title": {
                    "type": "string",
                    "example": "not found"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:8445",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Payment Protocol Server",
	Description:      "Payment Protocol Server is an implementation of a Bip-270 payment flow.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
